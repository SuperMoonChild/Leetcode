Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
Example 2:

Input: arr = [1,1]
Output: 1

Using Double Counter for keeping the max_count, the time complexity is O(n) and the Space Compexity is O(1) 
#let's dry run this to make sure it works 
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        #set up criteria 
        if not arr: return 0 

        num_criteria = len(arr)//4
        n = len(arr)
        max_count = 0 
        i = 0
        j = 1 

        while i < n and j < n: 
            if arr[i] == arr[j]: 
                max_count = max(j-i+1,max_count)
                while max_count > num_criteria: 
                    return arr[i]
                j+=1 
            else: 
                i+=1 
                j+=1 
        return arr[-1]

#Hash Map Solution: Time Complexity O(n) and Space Complexity O(n) 
from collections import defaultdict 
class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        #set up criteria 
        counts = defaultdict(int) 
        target = len(arr)/4

        for num in arr: 
            counts[num]+=1 
            if counts[num] > target: 
                return num 
        return -1 

#There is a binary search solution, will improve later 
