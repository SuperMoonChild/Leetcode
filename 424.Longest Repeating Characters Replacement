You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.
Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        longest = 0 
        l = 0 
        counts = [0] * 26 

        for r in range(len(s)): 
            counts[ord(s[r]) - ord('A')] += 1
            while (r-l+1) - max(counts) > k: 
                 counts[ord(s[l]) - ord('A') ] -= 1 
                 l += 1 
            longest = max(longest, (r-l+1))
        return longest

