https://leetcode.com/problems/subarray-product-less-than-k/description/
Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.

Using two pointer technique: 
10,5,2,6 
prod = 1 
i = 0 
k = 100 
product * 10 = 10 

As long as the product * 10 * i is < 100, we can loop 
otherwise, they have to remove the first element from the array, like 10*5*2 = 100 so we have to // first element to begin with 10 

Therefore, we have to design one elment is keeping multiplying and the left indext to remove the left most value in the list 

Let's dry run the following code: 
10 5 2 6 
right 
left 

10 * 5 = 50 < k  right = 0 
50 * 2 = 100 = k therefore, we have to let 100/10 = 10 the left most element 

class Solution:
    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
        if k <= 1: return 0
    
        left, prod, count = 0, 1, 0
        for right in range(len(nums)):
            prod *= nums[right]
            while prod >= k:
                 prod /= nums[left]
                 left += 1
            count += right - left + 1
        return count
