https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3. 

ababcbb: sliding window technique 
Using Set as remove and add operation and the difference between two pointer to calculate the distance 
Dry run of the Algo design: 
abcabb for example  (l is the faster pointer and r is the slower pointer) 
l
r 

If a not in the set, then add a in the set {a}, l++ = 0 max = 1 
   b not in the set, then add b in the set {a,b}, l++ = 1, max =2 
   c not in the set, then add c in the set {a,b,c} l++ =2 max = 3 
If a in the set, remove a from the set, set {b,c}, r++ = 0, max= 3 
   b in the set, remove b from the set, set {c}, r++ = 1, max = 3 
   c in the set , remove c from the set, set {}, r++ = 2, max = 3 
then b not in the set, add b in the set, {b}, l++ = 3, max = 3 
     b in the set, remove b in the set, {}, r++ = 3 
l++ = n, so terminate the loop, we have return the max length of = 3 

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        n = len(s) 
        char_set = set()
        l = 0 
        r = 0 
        max_length = 0 

        while r < n and l < n : 
            if s[l] not in char_set: 
                char_set.add(s[l])
                l+=1 
                max_length = max(max_length,l-r)
            else: 
                char_set.remove(s[r])
                r+=1 
        return max_length 

        

